public class Main64 {
	static int firstNum = 0;

//	Car a = new Car();							// 지역 변수 특성을 갖는 로컬 이너 클래스는 main메서드 블럭
												// 내에 선언 되었으므로 main블럭 내로 범위 제한되어 외부호출 불가.
	public static void main(String[] args) {
		int secondNum = 1;
//		Car b = new Car();	// 클래스 선언 이후에나 클래스 타입 사용 가능.
		
		class Car64{
			// 로컬 이너클래스 : 선언한 메서드 내에서만 통용되는 지역 변수와 같은 특성을 갖는 클래스로 21행 과 같이
			// 클래스 선언후에야 객체 생성 가능. 따라서 내부적으로 주 클래스의 모든 멤버를 직접 참조 가능한 반면,
			// 메서드 외부에서는 지역 변수 특성을 갖는 로컬 이너 클래스에 대한 생성 및 외부 참조 불가
			// 이처럼 로컬 이너 클래스는 메서드 내부에서만 사용이 제한되는 목적으로 활용. 일반적인 클래스와 마찬가지로
			// 상속, 재정의(오버라이딩) 모두 가능.
			void printCarNum() {
				System.out.println("차량번호 : " + firstNum + secondNum);	// 로컬 이너 클래스는 메서드 내 지역변수와
			}															// 동등한 자격이 주어지므로 메서드 블럭 내 
		}																// 지역 변수 뿐 아니라 주 클래스 모든 멤버
																		// 필드에 직접 접근 가능.
		Car64 avante = new Car64();
		avante.printCarNum();		// 로컬 이너 클래스 또한 메서드 내부에 선언된 하나의 독립적인 타입으로 로컬 이너 
									// 클래스가 선언된 메서드 내부더라도 로컬 이너 클래스 밖이면 직접 접근이 불가하여
		firstNum++;					// 21행과 같이 객체를 생성한 후에야 접근 가능.
//		secondNum = 2;
	}// 로컬 이너 클래스 내에서 외부 주 메서드의 지역 변수를 참조하기 위해서는 지역변수를 final로 선언하고나 값의 변경 불가.

}
